깃허브 용도
1. 내 소스코드를 저장(버전 관리) : 일종의 클라우드
2. 소스코드 공유 : 포트폴리오로 사용
3. 협업하는 공간 : 코드를 작성하고 따로 이메일 등으로 보낼 필요없이 깃허브에 올리면 됨. 

git : 코드를 github에 업로드 하는 역할. 내 파일을 감시하여 변경사항이 있는 부분을 찾아냄

github 가입
repository 만들기(폴더이름, 퍼블릭설정, create repository)

git 설치
git bash 실행
초기 세팅:
git config --global user.name "your_name"
git config --global user.email "your_email"
-> 깃허브 가입시 사용한 이메일
git config --list 
-> user.name, user.email 잘 들어갔는지 확인

vscode 프로젝트 파일 만들고 터미널 열기

깃허브 초기 설정
git init
->git을 쓸 준비한다
git remote add origin 주소
-> 프로젝트와 github를 연결한다
git remote -v
-> github가 제대로 연결되었는지 확인

파일 업로드
git add .
->어떤 파일을 깃허브에 올릴지 고르기. add 뒤에 파일명 적어주면 됨
   파일명 대신 '.'을 적으면 변경사항이 있는 파일을 git이 알아서 찾아줌
   특별한 경우가 아닌 이상 '.' 사용하면 됨.
git status
-> git add를 통해 어떤 파일들이 추가되었는지 확인
git commit -m "first commit"
->깃허브에 표시되는 히스토리. 최종, 최최종, 최종_최종과 같은 개념
   각 커밋마다 히스토리가 저장되서 어떤 변경사항들이 이전에 있었는지 확인할 수 있음
   변경사항을 적어주면 나중에 협업할 때 알아보기 편함
git push origin master
-> 코드를 master 브랜치로 업로드 한다. 개인 프로젝트면 이렇게 적으면 되지만 팀 협업을 할 때는 사용에 주의하도록 한다.
    깃허브에 있는 코드를 직빵으로 바꿔버리기 때문.
    따라서 협업에서는 팀원이 파일을 'pull'하면 관리자가 그것을 확인 한 다음 'push'해서 최종 업로드 하는 방식으로 진행
    자세한 설명은 나중에

코드에 변경사항이 있으면 git add . 단계부터 다시 해주면 됨

깃 10k 없애는 법:
https://velog.io/@memoyoon/VS-CODE-Git-5k-%EC%97%86%EC%95%A0%EB%8A%94-%EB%B0%A9%EB%B2%95how-to-delete-vs-code-git-5k



