<깃허브 용도>

1. 내 소스코드를 저장(버전 관리) : 일종의 클라우드
2. 소스코드 공유 : 포트폴리오로 사용
3. 협업하는 공간 : 코드를 작성하고 따로 이메일 등으로 보낼 필요없이 깃허브에 올리면 됨. 

Github : 코드를 올릴 수 있는 클라우드의 일종. 깃허브 이외에도 다양한 클라우드 서비스가 있음
Git : 코드를 Github에 업로드 하는 역할. Github와는 다른 프로그램. 내 파일을 감시하여 변경사항이 있는 부분을 찾아냄

====================================================================================================

<Git 초기설정>

1. git 설치

2. 윈도우 검색창에 git bash 검색 후 실행

3. 초기 세팅(아래의 명령어 한 줄씩 입력 후 엔터) :
  (1) git config --global user.name "your_name"
  (2) git config --global user.email "your_email"
       -> 깃허브 가입시 사용한 이메일
  (3) git config --list 
       -> 입력하면 텍스트가 많이 출력될 텐데, 밑부분으로 내려가서 user.name, user.email 잘 들어갔는지 확인

====================================================================================================

<Github에 파일 push(업로드)하기>

1. github.com 접속 후 로그인

2. 좌측의 초록색 [New] 버튼 클릭

3. repository 이름, 설명, 공개여부 선택 후 [Create repository] 클릭

4. 파일 탐색기를 이용하여 프로젝트 폴더로 이동

5. 빈 부분 우클릭 -> [더 많은 옵션 표시] 클릭 -> [Git Bash Here] 클릭 (Git Bash Here이 없다면 git을 제대로 설치하였는지 확인)

6. 최초로 프로젝트를 push(업로드) 하는 경우 :
  (1) git init
       ->git을 쓸 준비한다
  (2) git remote add origin 깃허브주소
       -> 프로젝트와 github를 연결한다. 
           repository 처음 생성 시 뜨는 화면에서 표시되는 주소 중 SSH가 아닌 HTTPS 주소 전체를 그대로 입력
  (3) git add .
       ->어떤 파일을 깃허브에 올릴지 고르기. add 뒤에 파일명 적어주면 됨
          파일명 대신 '.'을 적으면 변경사항이 있는 파일을 git이 알아서 찾아줌
          특별한 경우가 아닌 이상 '.' 사용하면 됨.
  (4) git commit -m "first commit"
       ->깃허브에 표시되는 히스토리. 최종, 최최종, 최종_최종과 같은 개념
          각 커밋마다 히스토리가 저장되서 어떤 변경사항들이 이전에 있었는지 확인할 수 있음
          변경사항을 적어주면 나중에 협업할 때 알아보기 편함
  (5) git push origin master
       -> 코드를 master 권한으로 업로드 한다. 개인 프로젝트면 이렇게 적으면 되지만 팀 협업을 할 때는 사용에 주의하도록 한다.
           깃허브에 있는 코드를 바로 바꿔버리기 때문.
           따라서 협업에서는 팀원이 파일을 'pull'하면 관리자가 그것을 확인 한 다음 'push'해서 최종 업로드 하는 방식으로 진행

코드에 변경사항이 있으면 (3)~(5) 과정만 해주면 됨.

번외
git status : git add를 통해 어떤 파일들이 추가되었는지 확인 가능
git remote -v : 현재 폴더가 연결되어있는 repository의 주소 확인 가능
git remote remove origin : 현재 연결되어 있는 repository와의 연결을 끊음

====================================================================================================

<깃허브 소유권한 변경>

깃허브 작업 시에는 개인 계정을 이용한 repository로 작업을 하고, 나중에 프로젝트가 완료된 후에 GIGA 계정으로 repository를 옮길 필요가 있음
1. 개인 repository 들어가기
2. [Settings] 클릭 후 페이지 맨 밑으로 이동
3. Danger Zone/Transfer ownership의 [Transfer] 클릭
4. GIGA 계정인 hcugiga 입력 및 confirm하기 위한 메세지 입력
5. GIGA 구글계정 이메일 접속
6. 링크 클릭하면 소유권이 이전됨
*소유권이 이전되더라도 원래 하던 방식으로 push하면 GIGA 계정의 repository에 적용됨

깃 10k 없애는 법:
https://velog.io/@memoyoon/VS-CODE-Git-5k-%EC%97%86%EC%95%A0%EB%8A%94-%EB%B0%A9%EB%B2%95how-to-delete-vs-code-git-5k